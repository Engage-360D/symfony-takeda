#%RAML 0.8
title: Cardiomagnyl API
version: v1

baseUri: "{schema}://{domain}/api/{version}"
baseUriParameters:
  schema:
    description: |
      На рабочем сервере API не будет доступен по HTTP.
    enum: [ http, https ]
  domain:
    description: |
      * `cardiomagnyl.dev.iengage.ru` — сервер активной разработки, обновляется очень часто;
      * `cardiomagnyl.iengage.ru` — сервер демонстрации заказчику, обновляется редко;
      * `cardiomagnyl.ru` — рабочий сервер.
    enum: [ cardiomagnyl.dev.iengage.ru, cardiomagnyl.iengage.ru, cardiomagnyl.ru ]

securitySchemes:
  - x-query-token:
      type: x-query-token
      describedBy:
        queryParameters:
          token:
            type: string
            example: "ACCESS_TOKEN"
            description: |
              Не забывайте экранировать токен, так как он может содержать специальные символы.
        responses:
          401:
            description: |
              Возвращается, если токен устарел или не существует.

traits:
  - secured:
      securedBy: [ x-query-token ]
      queryParameters:
        token:
          type: string
          example: "ACCESS_TOKEN"
          description: |
            Не забывайте экранировать токен, так как он может содержать специальные символы.

  - admin-only:
      responses:
        403:
          description: |
            Возвращается, если у пользователя нет роли `ROLE_ADMIN`.

  - paged:
      queryParameters:
        page:
          type: number
          example: 1
          description: |
            Нумерация начинается с единицы.
            Обязательно наличие параметра в запросе `limit`.
        limit:
          type: number
          example: 10
          description: |
            Количество записей на страницу.
            По умолчанию лимит не установлен.

/regions:
  description: for Web and Mobile
  get:
    is: [ paged ]
    responses:
      200:
        body:
          application/json:
            schema: !include v1/schemas/regions/list.json
            example: !include v1/examples/regions/list.json
  /{id}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/regions/one.json
              example: !include v1/examples/regions/one.json

/users:
  get:
    description: only for Web
    is: [ secured, admin-only, paged ]
    responses:
      200:
        body:
          application/json:
            schema: !include v1/schemas/users/list.json
            example: !include v1/examples/users/list.json
  post:
    description: |
      Регистрация нового пользователя.
      for Web and Mobile
    body:
      application/json:
        schema: !include v1/schemas/users/post.json
        example: !include v1/examples/users/post.json
    responses:
      201:
        body:
          application/json:
            schema: !include v1/schemas/users/one.json
            example: !include v1/examples/users/one.json
  /{id}:
    description: only for Web
    get:
      is: [ secured, admin-only ]
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/users/one.json
              example: !include v1/examples/users/one.json
    put:
      is: [ secured, admin-only ]
      body:
        application/json:
          schema: !include v1/schemas/users/put.json
          example: !include v1/examples/users/put.json
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/users/one.json
              example: !include v1/examples/users/one.json
    delete:
      is: [ secured, admin-only ]
      responses:
        200:
    /reset-password:
      description: only for Web
      post:
        is: [ secured, admin-only ]
        responses:
          200:

/tokens:
  description: for Web and Mobile
  post:
    description: |
      Аутентификация пользователя.
    body:
      application/json:
        schema: !include v1/schemas/tokens/post.json
        example: !include v1/examples/tokens/post.json
    responses:
      201:
        body:
          application/json:
            schema: !include v1/schemas/tokens/one.json
            example: !include v1/examples/tokens/one.json
  /facebook:
    post:
      description: |
        Аутентификация пользователя через facebook.com.
      body:
        application/json:
          schema: !include v1/schemas/tokens/facebook/post.json
          example: !include v1/examples/tokens/facebook/post.json
      responses:
        201:
          body:
            application/json:
              schema: !include v1/schemas/tokens/one.json
              example: !include v1/examples/tokens/one.json
  /vk:
    post:
      description: |
        Аутентификация пользователя через vk.com.
      body:
        application/json:
          schema: !include v1/schemas/tokens/vk/post.json
          example: !include v1/examples/tokens/vk/post.json
      responses:
        201:
          body:
            application/json:
              schema: !include v1/schemas/tokens/one.json
              example: !include v1/examples/tokens/one.json

/account:
  description: for Web and Mobile
  put:
    is: [ secured ]
    description: |
      Редактирование профиля пользователя.
    body:
      application/json:
        schema: !include v1/schemas/users/put.json
        example: !include v1/examples/users/put.json
    responses:
      200:
        body:
          application/json:
            schema: !include v1/schemas/users/one.json
            example: !include v1/examples/users/one.json
  /reset-password:
    post:
      is: [ secured ]
      responses:
        200:
  /test-results:
    get:
      queryParameters:
        sinceDate:
          type: date
          example: 1970-01-01T00:00:00+0000
          description: |
            Фильтр по дате прохождения теста.
        sinceId:
          type: number
          example: 21
          description: |
            Фильтр по ID теста.
      is: [ secured ]
      description: |
        Получение результатов тестирования пользователя.
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/test-results/list.json
              example: !include v1/examples/test-results/list.json
    /{id}/send-email:
      post:
        is: [ secured ]
        description: |
          Отправка результатов тестирования на email.
        body:
          application/json:
            schema: !include v1/schemas/test-results/send-email/post.json
            example: !include v1/examples/test-results/send-email/post.json
        responses:
          200:
            body:
              application/json:
                schema: !include v1/schemas/test-results/send-email/one.json
                example: !include v1/examples/test-results/send-email/one.json

    /{id}/pages/{recommendation}:
      get:
        is: [ secured ]
        description: |
          Получение подробной информации о рекомендации.
        responses:
          200:
            body:
              application/json:
                example: !include v1/examples/test-results/pages/one.json

    post:
      is: [ secured ]
      description: |
        Сохранение результатов тестирования пользователя.
      body:
        application/json:
          schema: !include v1/schemas/test-results/post.json
          example: !include v1/examples/test-results/post.json
      responses:
        201:
          body:
            application/json:
              schema: !include v1/schemas/test-results/one.json
              example: !include v1/examples/test-results/one.json


/test-results:
  description: only for Web
  get:
    is: [ secured, admin-only, paged ]
    responses:
      200:
        body:
          application/json:
            schema: !include v1/schemas/test-results/list.json
            example: !include v1/examples/test-results/list.json
  /{id}:
    get:
      is: [ secured, admin-only ]
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/test-results/one.json
              example: !include v1/examples/test-results/one.json
    /send-email:
      post:
        is: [ secured ]
        description: |
          Отправка результатов тестирования на email.
        body:
          application/json:
            schema: !include v1/schemas/test-results/send-email/post.json
            example: !include v1/examples/test-results/send-email/post.json
        responses:
          200:
            body:
              application/json:
                schema: !include v1/schemas/test-results/send-email/one.json
                example: !include v1/examples/test-results/send-email/one.json

/page-blocks:
  description: only for Web
  get:
    is: [ paged ]
    responses:
      200:
        body:
          application/json:
            schema: !include v1/schemas/page-blocks/list.json
            example: !include v1/examples/page-blocks/list.json
  post:
    is: [ secured, admin-only ]
    body:
      application/json:
        schema: !include v1/schemas/page-blocks/post.json
        example: !include v1/examples/page-blocks/post.json
    responses:
      201:
        body:
          application/json:
            schema: !include v1/schemas/page-blocks/one.json
            example: !include v1/examples/page-blocks/one.json
  /{id}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/page-blocks/one.json
              example: !include v1/examples/page-blocks/one.json
    put:
      is: [ secured, admin-only ]
      body:
        application/json:
          schema: !include v1/schemas/page-blocks/put.json
          example: !include v1/examples/page-blocks/put.json
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/page-blocks/one.json
              example: !include v1/examples/page-blocks/one.json
    delete:
      is: [ secured, admin-only ]
      responses:
        200:

/pages:
  description: only for Web
  get:
    is: [ paged ]
    responses:
      200:
        body:
          application/json:
            schema: !include v1/schemas/pages/list.json
            example: !include v1/examples/pages/list.json
  post:
    is: [ secured, admin-only ]
    body:
      application/json:
        schema: !include v1/schemas/pages/post.json
        example: !include v1/examples/pages/post.json
    responses:
      201:
        body:
          application/json:
            schema: !include v1/schemas/pages/one.json
            example: !include v1/examples/pages/one.json
  /{id}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/pages/one.json
              example: !include v1/examples/pages/one.json
    put:
      is: [ secured, admin-only ]
      body:
        application/json:
          schema: !include v1/schemas/pages/put.json
          example: !include v1/examples/pages/put.json
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/pages/one.json
              example: !include v1/examples/pages/one.json
    delete:
      is: [ secured, admin-only ]
      responses:
        200:

/news:
  description: only for Web
  get:
    queryParameters:
      onlyActive:
        type: string
        example: true
        description: |
          Флаг фильтрации новостей по статусу.
          По умолчанию, имеет значение false, т.е. возвращает все новости, в том числе неактивные.
      date:
        type: date
        example: 1991-01-19T00:00:00+0000
        description: |
          Дата фильтрации новостей.
      category:
        type: string
        example: treatment
        description: |
          Категория новостей.
    responses:
      200:
        body:
          application/json:
            schema: !include v1/schemas/news/list.json
            example: !include v1/examples/news/list.json

  /{id}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/news/one.json
              example: !include v1/examples/news/one.json

/opinions:
  description: only for Web
  get:
    queryParameters:
      onlyActive:
        type: string
        example: true
        description: |
          Флаг фильтрации новостей по статусу.
          По умолчанию, имеет значение false, т.е. возвращает все новости, в том числе неактивные.
    responses:
      200:
        body:
          application/json:
            schema: !include v1/schemas/opinions/list.json
            example: !include v1/examples/opinions/list.json

  /{id}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/opinions/one.json
              example: !include v1/examples/opinions/one.json

/experts:
  description: only for Web
  get:
    responses:
      200:
        body:
          application/json:
            schema: !include v1/schemas/experts/list.json
            example: !include v1/examples/experts/list.json
  /{id}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/experts/one.json
              example: !include v1/examples/experts/one.json

/records:
  description: only for Web
  /{id}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include v1/schemas/records/one.json
              example: !include v1/examples/records/one.json

